---
layout: default
title: Développez votre application
permalink: app
---

# Développez votre application

*Créé par Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

[**Premièrement, installez Ruby on Rails en suivant ce guide.**](/install)

## Étudier les outils


<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>
### Éditeurs de code / Éditeur de texte
* [Atom](https://atom.io/), gedit, vim, emacs, Sublime Text, Textmate sont des examples d'éditeurs que vous pouvez utiliser pour écrire du code et éditer des fichiers.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Terminal / Invite de commandes
* exécuter des commandes pour par example démarrer le server Rails.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Navigateur web
* (Firefox, Safari, Chrome) pour afficher votre application.

</div>

<div class="to-translate" markdown="1">
### Systèmes d'exploitation
It is important that you select the instructions specific to your operating system - the commands you need to run on a Windows computer are slightly different to Mac or Linux. If you're having trouble check the Operating System switcher at the bottom of the commands. In case you're using a cloud service (e.g. Cloud9, Codenvy), you need to run the Linux commands even if you are on a Windows computer.
</div>

## *1)* Créer l'application

Vous allez créer une application appelée railsgirls.

Ouvrez le Terminal / Ligne de commande :

* OS X: Ouvrez Spotlight, tapez *Terminal* et cliquez sur l'option *Terminal* qui vient d'apparaitre.
* Windows: Cliquez sur le menu Démarrer et cherchez "Command Prompt" et cliquez sur *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Search for *Terminal* on the dash and click *Terminal*.
* Cloud service (par ex. Cloud9, Codenvy)&nbsp;: Ouvrez votre <em>workspace</em>. Le terminal est le cadre en bas de la fenêtre de votre navigateur. 

<div class="to-translate" markdown="1">
Next, type these commands in the terminal:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>You can verify that a directory named <code>projects</code> was created by running the list command: <code>ls</code>. You should see the <code>projects</code> directory in the output. Now you want to change the directory you are currently in to the <code>projects</code> folder by running:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>You can verify you are now in an empty directory or folder by again running the <code>ls</code> command. Now you want to create a new app called <code>railsgirls</code> by running:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>This will create a new app in the folder <code>railsgirls</code>, so we again want to change the directory to be inside of our rails app by running:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>If you run <code>ls</code> inside of the directory you should see folders such as <code>app</code> and <code>config</code>. You can then start the rails server by running:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>You can verify that a directory named <code>projects</code> was created by running the list command: <code>dir</code>. You should see the <code>projects</code> directory in the output. Now you want to change the directory you are currently in to the <code>projects</code> folder by running:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>You can verify you are now in an empty directory or folder by again running the <code>dir</code> command. Now you want to create a new app called <code>railsgirls</code> by running:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>This will create a new app in the folder <code>railsgirls</code>, so we again want to change the directory to be inside of our rails app by running:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>If you run <code>dir</code> inside of the directory you should see folders such as <code>app</code> and <code>config</code>. You can then start the rails server by running:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Open <http://localhost:3000> in your browser. If you are using a cloud service (e.g. Codenvy), use its preview functionality instead (see [installation guide](/install#using-a-cloud-service) for details).

You should see a page with the Rails logo and the heading "Yay! You’re on Rails!", which means that your Rails app is up and running.

Notice in this window the command prompt is not visible because you are now in the Rails server, the command prompt looks like this:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

When the command prompt is not visible you cannot execute new commands. If you try running `cd` or another command it will not work. To return to the normal command prompt:

Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal to quit the server.

**Coach:** Explain what each command does. What was generated? What does the server do?

</div>

**Coach:** Expliquez chaque commande. Qu'est ce qui a été généré ? Comment marche le serveur ? Un mot à propos de MVC.

## *2)* Créer le scaffold Idea

Vous allez utiliser les scaffolds de Rails pour générer un point de départ qui vous permettra de lister, ajouter, supprimer, éditer et voir des choses ; dans notre cas, des idées (Idea).

**Coach:** Qu'est-ce qu'un scaffold : (échafaudage, les fondations d'un immeuble) la commande, le nom des modèles et des tables, les conventions de nommage, les attributs et les types de données. Que sont les migrations, et quand en a t'on besoin ? Pourquoi ?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

<div class="to-translate">
The scaffold creates new files in your project directory, but to get it to work properly we need to run a couple of other commands to update our database and restart the server.
</div>

{% highlight sh %}
rake db:migrate
rails s
{% endhighlight %}

Ouvrez [http://localhost:3000/ideas](http://localhost:3000/ideas) dans votre navigateur. <span class="to-translate">Cloud service (e.g. Codenvy) users need to append '/ideas' to their preview url instead (see [installation guide](/install#using-a-cloud-service)).</span>

Testez l'application et mesurez le chemin parcouru après l'écriture de seulement quelques lignes&nbsp;! 

<tt>Ctrl+C</tt> arrête le serveur quand vous avez fini de jouer avec.

## *3)* Design

**Coach:** Parlez de la relation entre HTML et Rails, quelles parties des vues sont HTML et lesquelles sont du Ruby (ERB)? Quel est le rapport avec MVC ?

Le design n'est pas très beau. Essayons de faire quelque chose pour changer ça. Nous utiliserons le projet Twitter Bootstrap pour mettre un style par défaut plus joli facilement.

Ouvrez app/views/layouts/application.html.erb et ajouter au-dessus de

{% highlight erb %}
<%= stylesheet_link_tag "application" %>
{% endhighlight %}

la ligne

{% highlight erb %}
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
{% endhighlight %}

et remplacez

{% highlight erb %}
<%= yield %>
{% endhighlight %}

par

{% highlight erb %}
<div class="container">
    <%= yield %>
</div>
{% endhighlight %}

Let&#8217;s also add topbar and footer to the layout and style those and the ideas table.
Ajoutez la barre de menu et le footer à la page et stylez-les, ainsi que la table des idées.


Dans application.html.erb sous `<body>` ajoutez :

{% highlight html %}
<div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container">
            <a class="brand" href="/">The Idea app</a>
            <ul class="nav">
                <li class="active"><a href="/ideas">Ideas</a></li>
            </ul>
        </div>
    </div>
</div>
{% endhighlight %}

et avant `</body>` ajoutez :

{% highlight html %}
<footer>
    <div class="container">
        Rails Girls 2012
    </div>
</footer>
{% endhighlight %}

Ouvrez app/assets/stylesheets/application.css et ajoutez à la fin :

{% highlight css %}
#logo { 
    font-size: 20px;
    font-family: &quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;
    float: left;
    padding: 10px;
}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
td.picture { width: 140px; }
td.picture img { width: 140px; }
{% endhighlight %}

**Coach:** Parlez un peu des layouts et de CSS.

## *4)* Ajout de l'upload d'images

Vous avez besoin d'installer une bibliothèque pour charger les images.

Ouvrez Gemfile dans le projet et ajoutez

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

sous

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

**Coach:** Quelles sont les bibliothèques utilisées et pourquoi sont elles utilisées ? Parler de l'Open Source.

Maintenant, générez le code nécessaire à l'upload des images. Dans le Terminal/Ligne de commande, lancez :

{% highlight sh %}
bundle
rails generate uploader Picture
{% endhighlight %}

Ouvrez app/models/idea.rb et ajoutez

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

sous la ligne

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

Dans app/views/ideas/_form.html.erb, remplacez

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

par

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

et

{% highlight erb %}
<%= form_for(@idea) do |f| %>
{% endhighlight %}

par

{% highlight erb %}
<%= form_for(@idea, :html => {:multipart => true}) do |f| %>
{% endhighlight %}

La vue n'est pas jolie, elle affiche seulement le chemin vers le fichier. Changez ça

Ouvrez app/views/ideas/show.html.erb et remplacez

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

par

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

**Coach:** un mot sur HTML.

## 5: Modifiez les routes

Si vous essayez d'ouvrir [http://localhost:3000](http://localhost:3000), vous verrez que cela affiche toujours la page par défaut. Faites en sorte que cela redirige vers la page des idées.

Sur OS X et Linux, dans le Terminal, lancez :

{% highlight sh %}
rm public/index.html
{% endhighlight %}

Sur Windows, dans la Ligne de commande, lancez :

{% highlight bat %}
del public\index.html
{% endhighlight %}

Enfin, ouvrez config/routes.rb et ajoutez à la seconde ligne du fichier :

{% highlight ruby %}
root :to => redirect("/ideas")
{% endhighlight %}

## Allez plus loin

* Ajoutez un design en utilisant HTML et CSS
* Ajoutez la possibiliter de voter sur chaque idée
* Utilisez CoffeeScript (ou JavaScript) pour ajouter des interactions
* Ajouter un redimensionnement d'image pour qu'elles chargent plus vite


## Guides additionnels

* GUIDE 1: [Déployez votre application sur Heroku par Terence Lee](./heroku)
* GUIDE 2: [Ajoutez des commentaires par Janika Liiv](http://janikaliiv.eu/homework/) (en)
* GUIDE 3: [Build a map of workshop participants by Rails Girls Berlin](http://blog.railsgirlsberlin.de/apptutorial/) (en)
